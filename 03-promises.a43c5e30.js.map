{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACbC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,UAY7B,SAASI,GAAUC,SAACA,EAAQC,MAAEA,IAC9BC,EAAAZ,GAASa,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAW,CACnEI,QAAO,IACTC,MAAO,QACPC,cAAc,EACdP,SAAU,a,CAId,SAASQ,GAASR,SAACA,EAAQC,MAAEA,IAC3BC,EAAAZ,GAASa,OAAOM,QAAQ,sBAAoBT,QAAeC,MAAW,CAClEI,QAAS,IACTC,MAAO,QACPC,cAAc,EACdP,SAAU,a,CAehB,SAASU,EAAcV,EAAUC,GAC/B,OAAO,IAAIU,SAAQ,CAACC,EAASC,KAC/BC,YAAW,KACaC,KAAKC,SAAW,GAEtCJ,EAAQ,C,SAACZ,E,MAAUC,IAEnBY,EAAO,C,SAACb,E,MAAUC,GAAO,GAExBA,EAAM,G,CA/CTT,EAAKM,KAAKmB,iBAAiB,UA2B3B,SAAkBC,GAChBA,EAAIC,kBA1BN,UAAqBlB,MAACA,EAAKmB,KAAEA,EAAIC,OAAEA,IACjC,IAAI,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAG,EACjCZ,EAAcY,EAAGrB,GAAOsB,KAAKxB,GAAWyB,MAAMhB,GAC9CP,GAASmB,C,CA6BPK,CALa,CACXxB,MAAOyB,SAASlC,EAAKC,WAAWkC,OAChCP,KAAMM,SAASlC,EAAKI,UAAU+B,OAC9BN,OAAQK,SAASlC,EAAKK,YAAY8B,Q","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\n\nconst refs = {\ninputDelay: document.querySelector('input[name=\"delay\"]'),\ninputStep: document.querySelector('input[name=\"step\"]'),\ninputAmount: document.querySelector('input[name=\"amount\"]'),\nform: document.querySelector('.form'),\n}\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction makePromise({delay, step, amount}){\n  for(let i = 1; i <= amount; i+=1) {\ncreatePromise(i, delay).then(onFulfill).catch(onReject);\ndelay += step;\n  }\n};\n\nfunction onFulfill({position, delay}){\nNotiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`,{\n    timeout: 6000,\n    width: '300px',\n    clickToClose: true,\n    position: \"right-top\",\n});\n};\n\nfunction onReject({position, delay}){\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`,{\n      timeout: 6000,\n      width: '300px',\n      clickToClose: true,\n      position: \"right-top\",\n  });\n  };\n\nfunction onSubmit(evt){\n  evt.preventDefault();\n  const data = {\n    delay: parseInt(refs.inputDelay.value),\n    step: parseInt(refs.inputStep.value),\n    amount: parseInt(refs.inputAmount.value)\n  };\n  makePromise(data);\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\nsetTimeout(() => {\n  const shouldResolve = Math.random() > 0.3;\nif (shouldResolve) {\n  resolve({position, delay});\n} else {\n  reject({position, delay})\n}\n}, delay);\n  });\n}\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","form","$47d4ff9957288465$var$onFulfill","position","delay","$parcel$interopDefault","Notify","success","timeout","width","clickToClose","$47d4ff9957288465$var$onReject","failure","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","step","amount","i","then","catch","$47d4ff9957288465$var$makePromise","parseInt","value"],"version":3,"file":"03-promises.a43c5e30.js.map"}